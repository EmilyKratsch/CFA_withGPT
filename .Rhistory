getwd()
# Chunk 1
library(confreq)
covid_1 <- read.table("SantePublic.csv", sep=";", header=TRUE, quote="\"")
library(confreq)
covid_1 <- read.table("SantePublic.csv", sep=";", header=TRUE, quote="\"")
covid_1
covid_2<-dat2fre(fre2dat(covid_1,fact=TRUE))
covid_2
resd1 <- CFA(covid_2,alpha=0.05, bintest = FALSE, form="~ Status + Age")
summary(resd1)
plot(resd1,type = "z.pChi",fill = c("red","green","grey"))
library(plotly)
# Define the points for the smaller 3D cube (reduced scale)
points <- matrix(c(0.25, 0.25, 0.25,
0.25, 0.75, 0.25,
0.75, 0.25, 0.25,
0.75, 0.75, 0.25,
0.25, 0.25, 0.75,
0.25, 0.75, 0.75,
0.75, 0.25, 0.75,
0.75, 0.75, 0.75), ncol = 3, byrow = TRUE)
# Define the lines connecting the points to form the smaller cube
edges <- list(c(1, 2), c(1, 3), c(1, 5),
c(2, 4), c(2, 6),
c(3, 4), c(3, 7),
c(4, 8),
c(5, 6), c(5, 7),
c(6, 8),
c(7, 8))
# Create plotly figure
fig <- plot_ly()
# Plot the edges of the smaller cube
for (edge in edges) {
fig <- fig %>% add_trace(
type = 'scatter3d',
mode = 'lines',
x = c(points[edge[1], 1], points[edge[2], 1]),
y = c(points[edge[1], 2], points[edge[2], 2]),
z = c(points[edge[1], 3], points[edge[2], 3]),
line = list(color = 'black', width = 4)
)
}
# Annotate the points with labels moved slightly away from corners
annotations <- list(
list(x = 0.2, y = 0.2, z = 0.2, text = "E-, P-, C-", showarrow = FALSE),
list(x = 0.8, y = 0.2, z = 0.2, text = "E+, P-, C-", showarrow = FALSE),
list(x = 0.2, y = 0.8, z = 0.2, text = "E-, P+, C-", showarrow = FALSE),
list(x = 0.8, y = 0.8, z = 0.2, text = "E+, P+, C-", showarrow = FALSE),
list(x = 0.2, y = 0.2, z = 0.8, text = "E-, P-, C+", showarrow = FALSE),
list(x = 0.8, y = 0.2, z = 0.8, text = "E+, P-, C+", showarrow = FALSE),
list(x = 0.2, y = 0.8, z = 0.8, text = "E-, P+, C+", showarrow = FALSE),
list(x = 0.8, y = 0.8, z = 0.8, text = "E+, P+, C+", showarrow = FALSE)
)
# Add the Criminogenic Configuration label further away with an arrow pointing to the corner
fig <- fig %>% add_trace(
type = 'scatter3d',
mode = 'lines+text',
x = c(0.75, 1),
y = c(0.75, 1),
z = c(0.75, 1),
line = list(color = 'blue', width = 2, dash = 'dot'),
text = c("", "Criminogenic Configuration: P+, E+, C+<br>Propensity x (Criminogenic) Exposure => Crime<br>P x E => C"),
textposition = "top right",
showlegend = FALSE
)
# Set the layout of the figure with a larger axis range and smaller cube
fig <- fig %>% layout(
scene = list(
xaxis = list(title = 'Exposure (E)', tickvals = c(0, 1), ticktext = c('low', 'high'), range = c(0, 1)),
yaxis = list(title = 'Propensity (P) (Morality, Control)', tickvals = c(0, 1), ticktext = c('low', 'high'), range = c(0, 1)),
zaxis = list(title = 'Crime (C)', tickvals = c(0, 1), ticktext = c('low', 'high'), range = c(0, 1)),
annotations = annotations
),
margin = list(l = 0, r = 0, b = 0, t = 0)
)
# Show the plot
fig
# Save as html
#htmlwidgets::saveWidget(fig, "C:/Users/Emily Kratsch/Desktop/CFA/3d_cube_plot.html")
# Load the R-package confreq
# If you log on to RStudio, check the marks on the right
library(confreq)
# Create data for gender and vote frequency
gender <- c("males","males","females","females")
vote <- c("pro","con","pro","con")
Freq.d1 <- c(100,50,60,190)
# Combine into a data frame and set class
d1 <- data.frame(gender,vote,Freq=Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form="~gender + vote")
summary(resd1, showall = TRUE)
library(confreq)
covid_1 <- read.table("SantePublic.csv", sep=";", header=TRUE, quote="\"")
covid_1
covid_2<-dat2fre(fre2dat(covid_1,fact=TRUE))
covid_2
resd1 <- CFA(covid_2,alpha=0.05, bintest = FALSE, form="~ Status + Age")
summary(resd1)
plot(resd1,type = "z.pChi",fill = c("red","green","grey"))
1 + 1
# Load required libraries
library(confreq)
library(ggplot2)
# Step 1: Reading the dataset
covid_1 <- read.table("SantePublic.csv", sep=";", header=TRUE, quote="\"")
# Step 2: Preparing the data for CFA
covid_2 <- dat2fre(fre2dat(covid_1, fact=TRUE))
# Step 3: Perform the CFA analysis
resd1 <- CFA(covid_2, alpha=0.05, bintest = FALSE, form="~ Status + Age")
# Summary of results
summary(resd1)
# Step 4: Enhanced Visualization
plot(resd1, type = "z.pChi", fill = c("#D55E00", "#0072B2", "#F0E442"),
main = "Configural Frequency Analysis: COVID-19 Data",
xlab = "Status and Age Interaction",
ylab = "z-values of Pearson Chi-squared test",
cex.lab = 1.5,    # Larger axis labels
cex.main = 1.7,   # Larger plot title
cex.axis = 1.3)   # Larger axis text
# Adding ggplot enhancements to make it even more impressive
res_plot <- data.frame(
Cell = as.factor(resd1$cells),
z_pChi = resd1$z.pChi,
Expected = resd1$expected
)
ggplot(res_plot, aes(x = Cell, y = z_pChi, fill = Expected)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_gradient(low = "grey", high = "#0072B2") +
theme_minimal() +
labs(
title = "Enhanced Configural Frequency Analysis Results",
x = "Cell (Status + Age Group)",
y = "z-values of Pearson Chi-squared test",
fill = "Expected Frequency"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) +
geom_text(aes(label = round(z_pChi, 2)), vjust = -0.5, size = 4)
# Load necessary libraries
library(confreq)
library(ggplot2)
# Load the data
covid_1 <- read.table("SantePublic.csv", sep=";", header=TRUE, quote="\"")
covid_1
# Prepare data for CFA
covid_2 <- dat2fre(fre2dat(covid_1, fact=TRUE))
covid_2
# Perform the CFA analysis
resd1 <- CFA(covid_2, alpha=0.05, bintest = FALSE, form="~ Status + Age")
# Display summary of results
summary(resd1)
# Enhanced CFA plot
res_plot <- data.frame(
Cell = as.factor(resd1$cells),
z_pChi = resd1$z.pChi,
Expected = resd1$expected
)
ggplot(res_plot, aes(x = Cell, y = z_pChi, fill = Expected)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_gradient(low = "grey", high = "#0072B2") +
theme_minimal() +
labs(
title = "Enhanced Configural Frequency Analysis Results",
x = "Cell (Status + Age Group)",
y = "z-values of Pearson Chi-squared test",
fill = "Expected Frequency"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) +
geom_text(aes(label = round(z_pChi, 2)), vjust = -0.5, size = 4)
# Step 3: Perform CFA
resd1 <- CFA(covid_2, alpha=0.05, bintest = FALSE, form="~ Status + Age")
# Inspect the structure of the result
str(resd1)
# Step 4: Enhanced Visualization
# Extract the cell information from the result object
# Check if `resd1` contains z.pChi or any related z-value
# The `z.pChi` could be stored in a different location within `resd1`
# Let's inspect the structure and extract the correct columns for plotting
# Assuming we have cells and corresponding z.pChi values in the correct structure
# Example structure extraction (assuming 'resd1$z.pChi' and 'resd1$cells' are correctly available)
res_plot <- data.frame(
Cell = as.factor(resd1$cells),  # Check if resd1$cells is correct
z_pChi = resd1$z.pChi,          # Ensure z.pChi exists and matches this name
Expected = resd1$expected       # Check if resd1$expected is correct
)
# Plotting with ggplot2
ggplot(res_plot, aes(x = Cell, y = z_pChi, fill = Expected)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_gradient(low = "grey", high = "#0072B2") +
theme_minimal() +
labs(
title = "Enhanced Configural Frequency Analysis Results",
x = "Cell (Status + Age Group)",
y = "z-values of Pearson Chi-squared test",
fill = "Expected Frequency"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) +
geom_text(aes(label = round(z_pChi, 2)), vjust = -0.5, size = 4)
library(confreq)
cfa <- read.table("BeispielCFA.csv", sep=";", header=TRUE, quote="\"")
#data to patterned frequencies
print(str(cfa))
cfa_new <- dat2fre(fre2dat(cfa))
cfa_new
#to start the function CFA the results are written into the object "resd1"
resd1 <- CFA(cfa_new, form="~ Seizures + Birth + Intelligence")
#tabulated printout
summary(resd1, sorton="pat.")
View(cfa)
cfa <- read.table("SantePublic.csv", sep=";", header=TRUE, quote="\"")
# Load the R-package confreq
# If you log on to RStudio, check the marks on the right
library(confreq)
# Create data for gender and vote frequency
gender <- c("males","males","females","females")
vote <- c("pro","con","pro","con")
Freq.d1 <- c(100,50,60,190)
# Combine into a data frame and set class
d1 <- data.frame(gender,vote,Freq=Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form="~gender + vote")
summary(resd1, showall = TRUE)
library(confreq)
library(knitr)
library(kableExtra)
library(confreq)
library(knitr)
#library(kableExtra)
# Create data for gender and vote frequency
gender <- c("males","males","females","females")
vote <- c("pro","con","pro","con")
Freq.d1 <- c(100,50,60,190)
# Combine into a data frame and set class
d1 <- data.frame(gender, vote, Freq=Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form="~gender + vote")
# Extract the local tests results
local_tests <- resd1$local.tests
# Create a data frame for the local tests
local_tests_df <- data.frame(
Test = local_tests$names,
Chi_Square = local_tests$chi.sq,
df = local_tests$df,
p_value = local_tests$p
)
# Format p-values to APA style
local_tests_df$p_value <- ifelse(local_tests_df$p_value < .001, "< .001",
sprintf("%.3f", local_tests_df$p_value))
# Create APA style table using kableExtra
kable(local_tests_df, format = "html", caption = "Local Tests in APA Style") %>%
kable_styling(full_width = F, position = "center") %>%
add_header_above(c(" " = 1, "APA Style Local Tests" = 3)) %>%
column_spec(2:4, bold = TRUE)
library(confreq)
library(knitr)
library(kableExtra)
library(confreq)
library(dplyr)
library(knitr)
library(kableExtra)
library(confreq)
library(dplyr)
library(knitr)
#library(kableExtra)
# Create data for gender and vote frequency
gender <- c("males","males","females","females")
vote <- c("pro","con","pro","con")
Freq.d1 <- c(100,50,60,190)
# Combine into a data frame and set class
d1 <- data.frame(gender, vote, Freq=Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form="~gender + vote")
# Extract the local tests results
local_tests <- resd1$local.tests
# Create a data frame for the local tests
local_tests_df <- data.frame(
Test = local_tests$names,
Chi_Square = local_tests$chi.sq,
df = local_tests$df,
p_value = local_tests$p
)
# Format p-values to APA style
local_tests_df$p_value <- ifelse(local_tests_df$p_value < .001, "< .001",
sprintf("%.3f", local_tests_df$p_value))
# Create APA style table using kableExtra
kable(local_tests_df, format = "html", caption = "Local Tests in APA Style") %>%
kable_styling(full_width = F, position = "center") %>%
add_header_above(c(" " = 1, "APA Style Local Tests" = 3)) %>%
column_spec(2:4, bold = TRUE)
library(confreq)
library(dplyr)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
library(confreq)
library(dplyr)
library(knitr)
library(kableExtra)
# Create data for gender and vote frequency
gender <- c("males","males","females","females")
vote <- c("pro","con","pro","con")
Freq.d1 <- c(100,50,60,190)
# Combine into a data frame and set class
d1 <- data.frame(gender, vote, Freq=Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form="~gender + vote")
# Extract the local tests results
local_tests <- resd1$local.tests
# Create a data frame for the local tests
local_tests_df <- data.frame(
Test = local_tests$names,
Chi_Square = local_tests$chi.sq,
df = local_tests$df,
p_value = local_tests$p
)
# Format p-values to APA style
local_tests_df$p_value <- ifelse(local_tests_df$p_value < .001, "< .001",
sprintf("%.3f", local_tests_df$p_value))
# Create APA style table using kableExtra
kable(local_tests_df, format = "html", caption = "Local Tests in APA Style") %>%
kable_styling(full_width = F, position = "center") %>%
add_header_above(c(" " = 1, "APA Style Local Tests" = 3)) %>%
column_spec(2:4, bold = TRUE)
library(confreq)
library(knitr)
library(kableExtra)
# Create data for gender and vote frequency
gender <- c("males", "males", "females", "females")
vote <- c("pro", "con", "pro", "con")
Freq.d1 <- c(100, 50, 60, 190)
# Combine into a data frame and set class
d1 <- data.frame(gender, vote, Freq = Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form = "~gender + vote")
# Extract the local tests results
local_tests <- resd1$local.tests
# Create a data frame for the local tests
local_tests_df <- data.frame(
Test = local_tests$names,
Chi_Square = local_tests$chi.sq,
df = local_tests$df,
p_value = local_tests$p
)
# Format p-values to APA style
local_tests_df$p_value <- ifelse(local_tests_df$p_value < .001, "< .001",
sprintf("%.3f", local_tests_df$p_value))
# Create APA style table using kableExtra
kable(local_tests_df, format = "html", caption = "Local Tests in APA Style") %>%
kable_styling(full_width = F, position = "center", bootstrap_options = c("striped", "hover")) %>%
column_spec(2:4, bold = TRUE)
library(confreq)
library(knitr)
# Create data for gender and vote frequency
gender <- c("males", "males", "females", "females")
vote <- c("pro", "con", "pro", "con")
Freq.d1 <- c(100, 50, 60, 190)
# Combine into a data frame and set class
d1 <- data.frame(gender, vote, Freq = Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form = "~gender + vote")
# Extract the local tests results
local_tests <- resd1$local.tests
# Check if local tests have been extracted correctly
print(local_tests)
# Create a data frame for the local tests
local_tests_df <- data.frame(
Test = local_tests$names,
Chi_Square = local_tests$chi.sq,
df = local_tests$df,
p_value = local_tests$p
)
# Format p-values to APA style
local_tests_df$p_value <- ifelse(local_tests_df$p_value < .001, "< .001",
sprintf("%.3f", local_tests_df$p_value))
# Create a basic APA style table using kable without kableExtra
kable(local_tests_df, format = "html", caption = "Local Tests in APA Style")
library(plotly)
# Define the points for the smaller 3D cube (reduced scale)
points <- matrix(c(0.25, 0.25, 0.25,
0.25, 0.75, 0.25,
0.75, 0.25, 0.25,
0.75, 0.75, 0.25,
0.25, 0.25, 0.75,
0.25, 0.75, 0.75,
0.75, 0.25, 0.75,
0.75, 0.75, 0.75), ncol = 3, byrow = TRUE)
# Define the lines connecting the points to form the smaller cube
edges <- list(c(1, 2), c(1, 3), c(1, 5),
c(2, 4), c(2, 6),
c(3, 4), c(3, 7),
c(4, 8),
c(5, 6), c(5, 7),
c(6, 8),
c(7, 8))
# Create plotly figure
fig <- plot_ly()
# Plot the edges of the smaller cube
for (edge in edges) {
fig <- fig %>% add_trace(
type = 'scatter3d',
mode = 'lines',
x = c(points[edge[1], 1], points[edge[2], 1]),
y = c(points[edge[1], 2], points[edge[2], 2]),
z = c(points[edge[1], 3], points[edge[2], 3]),
line = list(color = 'black', width = 4)
)
}
# Annotate the points with labels moved slightly away from corners
annotations <- list(
list(x = 0.2, y = 0.2, z = 0.2, text = "E-, P-, C-", showarrow = FALSE),
list(x = 0.8, y = 0.2, z = 0.2, text = "E+, P-, C-", showarrow = FALSE),
list(x = 0.2, y = 0.8, z = 0.2, text = "E-, P+, C-", showarrow = FALSE),
list(x = 0.8, y = 0.8, z = 0.2, text = "E+, P+, C-", showarrow = FALSE),
list(x = 0.2, y = 0.2, z = 0.8, text = "E-, P-, C+", showarrow = FALSE),
list(x = 0.8, y = 0.2, z = 0.8, text = "E+, P-, C+", showarrow = FALSE),
list(x = 0.2, y = 0.8, z = 0.8, text = "E-, P+, C+", showarrow = FALSE),
list(x = 0.8, y = 0.8, z = 0.8, text = "E+, P+, C+", showarrow = FALSE)
)
# Add the Criminogenic Configuration label further away with an arrow pointing to the corner
fig <- fig %>% add_trace(
type = 'scatter3d',
mode = 'lines+text',
x = c(0.75, 1),
y = c(0.75, 1),
z = c(0.75, 1),
line = list(color = 'blue', width = 2, dash = 'dot'),
text = c("", "Criminogenic Configuration: P+, E+, C+<br>Propensity x (Criminogenic) Exposure => Crime<br>P x E => C"),
textposition = "top right",
showlegend = FALSE
)
# Set the layout of the figure with a larger axis range and smaller cube
fig <- fig %>% layout(
scene = list(
xaxis = list(title = 'Exposure (E)', tickvals = c(0, 1), ticktext = c('low', 'high'), range = c(0, 1)),
yaxis = list(title = 'Propensity (P) (Morality, Control)', tickvals = c(0, 1), ticktext = c('low', 'high'), range = c(0, 1)),
zaxis = list(title = 'Crime (C)', tickvals = c(0, 1), ticktext = c('low', 'high'), range = c(0, 1)),
annotations = annotations
),
margin = list(l = 0, r = 0, b = 0, t = 0)
)
# Show the plot
fig
# Save as html
#htmlwidgets::saveWidget(fig, "C:/Users/Emily Kratsch/Desktop/CFA/3d_cube_plot.html")
# Load the R-package confreq
# If you log on to RStudio, check the marks on the right
library(confreq)
# Create data for gender and vote frequency
gender <- c("males","males","females","females")
vote <- c("pro","con","pro","con")
Freq.d1 <- c(100,50,60,190)
# Combine into a data frame and set class
d1 <- data.frame(gender,vote,Freq=Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form="~gender + vote")
summary(resd1, showall = TRUE)
library(confreq)
library(dplyr)
library(knitr)
library(kableExtra)
# Create data for gender and vote frequency
gender <- c("males","males","females","females")
vote <- c("pro","con","pro","con")
Freq.d1 <- c(100,50,60,190)
# Combine into a data frame and set class
d1 <- data.frame(gender, vote, Freq=Freq.d1)
class(d1) <- c("data.frame", "Pfreq")
# Compute and show the CFA results
resd1 <- CFA(d1, form="~gender + vote")
# Extract the local tests results
local_tests <- resd1$local.tests
# Create a data frame for the local tests
local_tests_df <- data.frame(
Test = local_tests$names,
Chi_Square = local_tests$chi.sq,
df = local_tests$df,
p_value = local_tests$p
)
# Format p-values to APA style
local_tests_df$p_value <- ifelse(local_tests_df$p_value < .001, "< .001",
sprintf("%.3f", local_tests_df$p_value))
# Create APA style table using kableExtra
kable(local_tests_df, format = "html", caption = "Local Tests in APA Style") %>%
kable_styling(full_width = F, position = "center") %>%
add_header_above(c(" " = 1, "APA Style Local Tests" = 3)) %>%
column_spec(2:4, bold = TRUE)
